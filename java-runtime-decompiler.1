.TH java-runtime-decompiler 1 "26 August 2019" "version 3.0"
.SH NAME
java-runtime-decompiler \- launch java-runtime decompiler GUI
.SH SYNOPSIS
java-runtime-decompiler
.SH DESCRIPTION
It is used for extraction of bytecode from running JVM and decompilation of the bytecode with an external decompiler. Paths to the decompiler need to be specified in .json configuration file located in /etc/java-runtime-decompiler
.SH OPTIONS
.IP -verbose
Print out all exceptions and debugging strings in stdout.
.IP -help
Print out help and exits.
.IP -listjvms
List available local JVMs.
.IP -listplugins
List currently configured plugins with their status.
.IP "-listclasses pid-xor-url"
List loaded classes from JVM with given PID/URL.
.IP "-bytes pid class-name"
Print on stdout binary form of given class loaded in JVM with given PID/URL.
.IP "-base64bytes pid-xor-url class-name"
Print on stdout binary form encoded in base64 of given class loaded in JVM with given PID/URL.
.IP "-decompile pid-xor-url class-name config-file"
Print on stdout decompiled class, needs PID/URL of JVM, class name and name/file with decompiler configuration, can use javap disassembler. To pass arguments to the disassembler, add them to javap without spaces (e.g. javap-v).
.IP "-overwrite pid/urlOfJVM  classToOverwrite fileWithNewBytecode"
three args - pid or url of JVM and class to overwrite and file with new bytecode
.SH AUTHOR
Petra Alice Mikova (petra.alice.mikova@gmail.com)
Jiri Vanek (judovana@email.com)
Radek Manak (Radek.Manak@protonmail.com)
Ondrej Hrdlicka (ondra.ondrah@seznam.cz)

